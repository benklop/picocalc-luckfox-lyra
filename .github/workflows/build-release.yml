name: Build and Release PicoCalc Firmware

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Free up disk space
      run: |
        # Remove some pre-installed software to free up space
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache
        sudo docker system prune -af
        df -h
        
    - name: Create persistent directories
      run: |
        mkdir -p output
        mkdir -p .ccache
        mkdir -p buildroot-output
        mkdir -p config
        mkdir -p release-artifacts
        
    - name: Set up build environment
      run: |
        # Set up the initial build environment
        echo "Setting up build environment..."
        ./setup.sh
        
    - name: Build firmware
      run: |
        # Run the full build process
        echo "Building firmware..."
        ./build.sh all
        
    - name: Create SD card image
      run: |
        # Create flashable SD card image
        echo "Creating SD card image..."
        ./image.sh -o release-artifacts/sdcard.img
        
        # Create compressed version for easier download
        gzip -k release-artifacts/sdcard.img
        
        echo "SD card image created successfully"
        ls -la release-artifacts/sdcard.img*
        
    - name: Check build outputs
      run: |
        echo "=== Build completed, checking outputs ==="
        find output/ -type f -name "*.img" -o -name "*.bin" -o -name "update.*" | sort
        ls -la output/firmware/ || true
        ls -la output/ | grep -E "\.(img|bin|tar\.gz)$" || true
        
    - name: Package build artifacts
      run: |
        # Create a comprehensive artifact package
        mkdir -p release-artifacts
        
        # Copy firmware files
        if [ -d "output/firmware" ]; then
          cp -r output/firmware/* release-artifacts/ 2>/dev/null || true
        fi
        
        # Look for main update image
        find output/ -name "update.img" -exec cp {} release-artifacts/ \; 2>/dev/null || true
        find output/ -name "*.img" -exec cp {} release-artifacts/ \; 2>/dev/null || true
        find output/ -name "*.bin" -exec cp {} release-artifacts/ \; 2>/dev/null || true
        
        # Copy rootfs if available
        if [ -f "output/rootfs.tar" ]; then
          cp output/rootfs.tar release-artifacts/
        fi
        
        # Create a build info file
        echo "PicoCalc Lyra Firmware Build" > release-artifacts/BUILD_INFO.txt
        echo "Tag: ${GITHUB_REF#refs/tags/}" >> release-artifacts/BUILD_INFO.txt
        echo "Date: $(date -u)" >> release-artifacts/BUILD_INFO.txt
        echo "Commit: ${GITHUB_SHA}" >> release-artifacts/BUILD_INFO.txt
        echo "" >> release-artifacts/BUILD_INFO.txt
        echo "Files included:" >> release-artifacts/BUILD_INFO.txt
        ls -la release-artifacts/ >> release-artifacts/BUILD_INFO.txt
        
        # Show what we're about to release
        echo "=== Release artifacts ==="
        ls -la release-artifacts/
        
    - name: Create release archive
      run: |
        # Create a compressed archive of all artifacts
        tar -czf picocalc-firmware-${GITHUB_REF#refs/tags/}.tar.gz -C release-artifacts .
        
        # Also create individual files for easier download
        cd release-artifacts
        if [ -f "update.img" ]; then
          gzip -k update.img
        fi
        cd ..
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: picocalc-firmware-${{ github.ref_name }}
        path: release-artifacts/
        retention-days: 90
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          picocalc-firmware-${{ github.ref_name }}.tar.gz
          release-artifacts/sdcard.img
          release-artifacts/sdcard.img.gz
          release-artifacts/update.img
          release-artifacts/update.img.gz
          release-artifacts/*.bin
          release-artifacts/*.img
          release-artifacts/BUILD_INFO.txt
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
        generate_release_notes: true
        body: |
          ## PicoCalc Lyra Firmware ${{ github.ref_name }}
          
          This release contains the complete firmware image for the ClockworkPi PicoCalc running on LuckFox Lyra hardware.
          
          ### Quick Start (Recommended)
          
          **For most users, download the SD card image:**
          
          1. Download `sdcard.img.gz` (compressed) or `sdcard.img` (uncompressed)
          2. Flash directly to an SD card using dd, Raspberry Pi Imager, balenaEtcher, or similar:
             ```bash
             # If using compressed image:
             gunzip -c sdcard.img.gz | sudo dd of=/dev/sdX bs=1M status=progress
             
             # If using uncompressed image:
             sudo dd if=sdcard.img of=/dev/sdX bs=1M status=progress
             ```
          3. Insert the SD card into your PicoCalc and power on
          
          ### Advanced Installation
          
          **For advanced users or custom installations:**
          
          1. Download `update.img` for use with Rockchip flash tools
          2. Flash using rkdeveloptool, RKDevTool, or similar Rockchip utilities
          
          ### Files
          
          - `sdcard.img` / `sdcard.img.gz` - **Recommended**: Complete SD card image (flash directly to SD card)
          - `update.img` / `update.img.gz` - Rockchip update image (for use with Rockchip tools)
          - `boot.img` - Boot partition image (for advanced users)
          - `uboot.img` - U-Boot bootloader (for advanced users)
          - `MiniLoaderAll.bin` - Loader binary (for advanced users)
          - `BUILD_INFO.txt` - Build information and file listing
          
          ### Changes
          
          See the generated release notes below for a list of changes since the previous release.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
